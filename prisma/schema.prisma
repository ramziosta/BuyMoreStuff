generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  imageUrl         String
  price            Int
  additionalImages String[] // Array of strings for additional images
  category         String? // Existing category field
  tags             String[] // Tags for more flexible categorization
  brand            String? // Brand or manufacturer
  stockQuantity    Int? // Quantity in stock
  isInStock        Boolean? // Whether the product is in stock
  sku              String? // Stock Keeping Unit for unique identification
  averageRating    Float? // Average rating of the product
  reviewCount      Int? // Number of reviews the product has
  dimensions       Json? // Store dimensions as JSON (height, width, depth)
  weight           Float? // Weight of the product
  seoMetadata      Json? // SEO-related data (meta title, description)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  details          String?
  CartItem         CartItem[]
  WishListItems    WishListItem[]

  @@map("products")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @unique @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId // id of the cart item
  productId String  @db.ObjectId // Id of the product in the cart
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartItems")
}

model WishList {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  items     WishListItem[]
  userId    String?        @unique @db.ObjectId
  user      User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("wishLists")
}

model WishListItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // id of the wishlist item
  productId  String   @db.ObjectId // Id of the product in the wishlist
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Int
  wishListId String   @db.ObjectId
  wishList   WishList @relation(fields: [wishListId], references: [id], onDelete: Cascade)

  @@map("wishListItems")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  street        String? // Street number and name
  city          String?
  state         String?
  zipcode       String?
  phoneNumber   String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wishList      WishList[] // Relation to WishList
  Cart          Cart[] // Relation to Cart

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// when the schema changes we need to run
// npx prisma generate
// npx prisma db
